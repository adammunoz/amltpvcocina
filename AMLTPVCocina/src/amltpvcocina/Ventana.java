/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Ventana.java
 *
 * Created on Aug 4, 2009, 1:05:58 PM
 */

package amltpvcocina;

import java.awt.Color;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc-xp1
 */
public class Ventana extends javax.swing.JFrame {
    DefaultTableModel model;
    static Ventana selfReference;
    String lastInsertedMesa = null;
    Vector lastInsertedMesaProductos = new Vector();
    Vector<Watch> watchVector = new Vector();

    /** Creates new form Ventana */
    public Ventana() {
        // TODO implement table listener, not all cocinas listen to the same table
        initComponents();
        model = (DefaultTableModel) table.getModel();
        table.getColumnModel().getColumn(0).setMaxWidth(60);
        table.getColumnModel().getColumn(1).setMaxWidth(120);
        table.getColumnModel().getColumn(1).setMinWidth(100);
        table.getColumnModel().getColumn(2).setMaxWidth(80);
        table.getColumnModel().getColumn(3).setMinWidth(150);
        selfReference = this;
        table.getColumnModel().getColumn(0).setCellRenderer(
                new FormatRenderer(javax.swing.SwingConstants.CENTER));
        table.getColumnModel().getColumn(1).setCellRenderer(
                new FormatRenderer(Color.WHITE,Color.ORANGE,javax.swing.SwingConstants.CENTER));
        table.getColumnModel().getColumn(2).setCellRenderer(
                new FormatRenderer(javax.swing.SwingConstants.CENTER));
        table.getColumnModel().getColumn(3).setCellRenderer(
                new FormatRenderer(javax.swing.SwingConstants.LEFT));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        siguienteButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mesasMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AML TPV Cocina - Versi√≥n Beta");

        table.setFont(new java.awt.Font("Tahoma", 0, 24));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MESA", "TIEMPO", "CANTIDAD", "PRODUCTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(26);
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        siguienteButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        siguienteButton.setText("Siguiente");
        siguienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("Opciones");

        mesasMenuItem.setText("Mesas ...");
        mesasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesasMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(mesasMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(192, Short.MAX_VALUE)
                .addComponent(siguienteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(siguienteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void siguiente(){
        System.out.println("Siguiente");
        watchVector.get(0).stop();

        String mesa = (String) model.getValueAt(0, 0);

        int numberOfRows = getNumberOfRowsOfMesa(mesa);
        System.out.println("Number of rows for mesa is "+numberOfRows);

        siguienteButtonActionPerformedProcess(mesa);
        watchVector.remove(0);
        Iterator iter = watchVector.iterator();
        while (iter.hasNext()){
            ((Watch) iter.next()).upRows(numberOfRows+1);
        }
        try {
            Conexion conexion = new Conexion(Main.serverName);
            conexion.sendMsg("mesaServida@"+mesa);
            conexion.waitForMsgs(false);
        } catch (UnknownHostException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    private void siguienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteButtonActionPerformed
        siguiente();
        
    }//GEN-LAST:event_siguienteButtonActionPerformed

    private void mesasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesasMenuItemActionPerformed
        MesasDialog dialog = new MesasDialog(this,true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_mesasMenuItemActionPerformed

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        siguiente();
    }//GEN-LAST:event_tableKeyPressed

   private void siguienteButtonActionPerformedProcess(String mesa) {
        model.removeRow(0);
        try{
            String mesaSiguiente = (String) model.getValueAt(0, 0);
            if (mesa.equals(mesaSiguiente) || mesaSiguiente.equals("-")){
                siguienteButtonActionPerformedProcess(mesa);
            }
        }
        catch (java.lang.ArrayIndexOutOfBoundsException ex){
            System.out.println("No hay mas comandas");
        }
   }

   void removeRow(int row) {
        model.removeRow(row);
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mesasMenuItem;
    private javax.swing.JButton siguienteButton;
    protected javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

   

    void addComanda(Object[] rowArray) {
        boolean insertWatch;
        if (model.getRowCount() == 0 ||!lastInsertedMesa.equals((String) rowArray[0])){
            insertWatch = true;
        }
        else{
            insertWatch = false;
        }
        int foundRow = getContentsTablePositionWithProductoAndMesa(
                (String) rowArray[3],(String) rowArray[0]);

        if (model.getRowCount()>0){
            if (!lastInsertedMesa.equals((String)rowArray[0])){
                Object[] empty = {"-",null,null,null};
                model.addRow(empty);
                
            }
        }

        if (foundRow == -1){
            model.addRow(rowArray);
        }
        else {
            int cant = (Integer) model.getValueAt(foundRow, 2);
            model.setValueAt(cant+1, foundRow, 2);
        }
        System.out.println(model.getRowCount());
        if (insertWatch){
            
            foundRow = getContentsTablePositionWithProductoAndMesa(
                (String) rowArray[3],(String) rowArray[0]);
            Watch watch = new Watch(foundRow);
            Thread watchThread  = new Thread(watch);
            watchVector.add(watch);
            watchThread.start();
        }
        lastInsertedMesa = (String) rowArray[0];
    }
    
    int getNumberOfRowsOfMesa(String mesa){
        int i = 0;
        int counter=0;
        try{
            while (model.getValueAt(i, 0).equals(mesa)){
                counter = counter +1;
                i = i +1;
            }
        }
        catch (java.lang.ArrayIndexOutOfBoundsException ex){
            System.out.println("Reached end of table");
            return counter;
        }
        return counter;
    }

    int getContentsTablePositionWithProductoAndMesa(String producto,String mesa){
        int rows = model.getRowCount();
        int result;
        for (int i=0;i<rows;i++){
            try{
                if (model.getValueAt(i, 3).equals(producto) &&
                    model.getValueAt(i, 0).equals(mesa)){
                    return i;
                }
            }
            catch (java.lang.NullPointerException ex){
                System.out.println("Ignorando null value");
            }
        }
        return -1;
    }
    Vector getContentsTablePositionWithMesa(String mesa){
        int rows = model.getRowCount();
        Vector<Integer> result = new Vector<Integer>();
        for (int i=0;i<rows;i++){
            try{
                if (model.getValueAt(i, 0).equals(mesa)){
                    result.add(i);
                }
            }
            catch (java.lang.NullPointerException ex){
                System.out.println("Ignorando null value");
            }
        }
        return result;
    }
    void borrarProducto(String mesa, String producto) {
        try{
            int foundRow = getContentsTablePositionWithProductoAndMesa(producto, mesa);
            int cant = (Integer) model.getValueAt(foundRow, 2);
            if (cant == 1){
                model.removeRow(foundRow);
            }
            else{
                model.setValueAt(cant-1, foundRow, 2);
            }
        }
        catch (java.lang.ArrayIndexOutOfBoundsException ex){
            System.out.println("No hay producto para borrar");
        }
    }

}
